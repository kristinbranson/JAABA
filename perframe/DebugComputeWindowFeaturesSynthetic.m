% script for computing window features

% set up path
if ispc,
  JCtrax_path = 'E:\Code\JCtrax';
  FlyBowlAnalysis_path = 'E:\Code\FlyBowlAnalysis';
  rootdatadir = 'E:\Code\Jdetect\larva\fly_data\TrainingData';
  settingsdir = 'E:\Code\FlyBowlAnalysis\settings';
else
  JCtrax_path = '/groups/branson/home/bransonk/tracking/code/JCtrax';
  FlyBowlAnalysis_path = '/groups/branson/bransonlab/projects/olympiad/FlyBowlAnalysis';
  settingsdir = '/groups/branson/bransonlab/projects/olympiad/FlyBowlAnalysis/settings';
end
addpath(fullfile(JCtrax_path,'misc'));
addpath(fullfile(JCtrax_path,'filehandling'));
addpath(FlyBowlAnalysis_path);

%% generate synthetic test data

N = 1000;
sigma = 1;
x = nan(1,N);
x(1) = 0;
x(2) = x(1)+randn(1)*sigma;
for n = 3:N,
  x(n) = x(n-1) + (x(n-1)-x(n-2))*.5 + randn(1)*sigma;
end

%% set parameters

SANITY_CHECK = true;
nbins = 10;
hist_edges = linspace(-max(abs(x)),max(abs(x)),nbins+1);
prctiles = [2.5,50,97.5];
change_window_radii = [0,1,2];
num_harmonic = 3;

default_params = {'min_window_radius',0,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',[-1,0,1],...
  'trans_types','all'};

feature_types = {};

mean_params = {'min_window_radius',0,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',[-1,0,1],...
  'trans_types','all'};
feature_types{end+1} = 'mean';

min_params = {'min_window_radius',1,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',[-1,0,1],...
  'trans_types','all'};
feature_types{end+1} = 'min';

max_params = {'min_window_radius',1,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',[-1,0,1],...
  'trans_types','all'};
feature_types{end+1} = 'max';

hist_params = {'min_window_radius',1,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',0,...
  'trans_types','all',...
  'hist_edges',hist_edges};
feature_types{end+1} = 'hist';

prctile_params = {'min_window_radius',10,...
  'max_window_radius',20,...
  'nwindow_radii',2,...
  'window_offsets',[-1,0,1],...
  'trans_types','all',...
  'prctiles',prctiles};
feature_types{end+1} = 'prctile';

change_params = {'min_window_radius',1,...
  'max_window_radius',20,...
  'nwindow_radii',2,...
  'window_offsets',[-1,0,1],...
  'trans_types','all',...
  'change_window_radii',change_window_radii};
feature_types{end+1} = 'change';

std_params = {'min_window_radius',2,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',[-1,0,1],...
  'trans_types','all'};
feature_types{end+1} = 'std';

harmonic_params = {'min_window_radius',2,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',[-1,0,1],...
  'num_harmonic',num_harmonic,...
  'trans_types','all'};
feature_types{end+1} = 'harmonic';

diff_neighbor_mean_params = {'min_window_radius',2,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',[-1,0,1],...
  'trans_types','all'};
feature_types{end+1} = 'diff_neighbor_mean';

diff_neighbor_min_params = {'min_window_radius',2,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',[-1,0,1],...
  'trans_types','all'};
feature_types{end+1} = 'diff_neighbor_min';

diff_neighbor_max_params = {'min_window_radius',2,...
  'max_window_radius',20,...
  'nwindow_radii',5,...
  'window_offsets',[-1,0,1],...
  'trans_types','all'};
feature_types{end+1} = 'diff_neighbor_max';

zscore_neighbors_params = {'min_window_radius',5,...
  'max_window_radius',20,...
  'nwindow_radii',3,...
  'window_offsets',[-1,0,1],...
  'trans_types','all'};
feature_types{end+1} = 'zscore_neighbors';

%% do it

[y,feature_names] = ComputeWindowFeatures(x,...
  'sanitycheck',SANITY_CHECK,...
  default_params{:},...
  'feature_types',feature_types,...
  'mean_params',mean_params,...
  'min_params',min_params,...
  'max_params',max_params,...
  'hist_params',hist_params,...
  'prctile_params',prctile_params,...
  'change_params',change_params,...
  'std_params',std_params,...
  'harmonic_params',harmonic_params,...
  'diff_neighbor_mean_params',diff_neighbor_mean_params,...
  'diff_neighbor_min_params',diff_neighbor_min_params,...
  'diff_neighbor_max_params',diff_neighbor_max_params,...
  'zscore_neighbors_params',zscore_neighbors_params);
  

%% plot stuff

figure(1);
clf;
plot(1:N,x,'ko-','markerfacecolor','k');
hold on;

fns_plot = {{'stat','mean','trans','none','radius',9,'offset',0},...
  {'stat','min','trans','flip','radius',11,'offset',0},...
  {'stat','max','trans','none','radius',3,'offset',-3},...
  {'stat','hist','trans','abs','radius',3,'offset',0,'bin',nbins},...
  {'stat','prctile','trans','abs','radius',20,'offset',0,'prctile',97.5},...
  {'stat','change','trans','none','radius',20,'offset',-20,'change_window_radius',2},...
  {'stat','std','trans','none','radius',20,'offset',0},...
  {'stat','harmonic','trans','none','radius',20,'offset',0,'num_harmonic',1},...
  {'stat','diff_neighbor_mean','trans','abs','radius',20,'offset',0},...
  {'stat','diff_neighbor_min','trans','abs','radius',20,'offset',0},...
  {'stat','diff_neighbor_max','trans','none','radius',20,'offset',0},...
  {'stat','zscore_neighbors','trans','none','radius',20,'offset',0}};

for i1 = 1:numel(fns_plot),
  fn1 = fns_plot{i1};
  disp(fn1);
  ismatch = false;
  % find the matching feature
  for i2 = 1:numel(feature_names),
    ismatch = true;
    fn2 = feature_names{i2};
    for j1 = 1:2:numel(fn1)-1,
      j2 = find(strcmp(fn1{j1},fn2(1:2:end)),1);
      if isempty(j2),
        ismatch = false;
        break;
      else
        j2 = j2*2-1;
        if ischar(fn1{j1+1}) && ~strcmpi(fn1{j1+1},fn2{j2+1}),
          ismatch = false;
          break;
        elseif ~ischar(fn1{j1+1}) && abs(fn1{j1+1}-fn2{j2+1}>.0001),
          ismatch = false;
          break;
        end
      end
    end
    if ismatch,
      break;
    end
  end
  if ~ismatch,
    fprintf('\n');
    warning('No match found for fns_plot %d',i1);
    disp(fns_plot{i1});
    fprintf('\n');
    input('Press enter to continue: ');    
    continue;
  end
  hplot = plot(1:N,y(i2,:),'r.-');
  disp(feature_names{i2});
  input('Press enter to continue: ');
  if ishandle(hplot) && i1 ~= numel(fns_plot),
    delete(hplot);
  end
end

